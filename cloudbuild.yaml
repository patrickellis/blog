# cloudbuild.yaml - For a static Astro.js site

steps:
  # 1. Install Node.js dependencies
  # This step uses the official npm builder to run 'npm install'.
  - name: "gcr.io/cloud-builders/npm"
    args: ["install"]
    id: "npm-install"

  # 2. Build the static site
  # This runs the 'astro build' command, which is aliased to 'npm run build'.
  # The output will be a static site in the /dist directory.
  - name: "gcr.io/cloud-builders/npm"
    args: ["run", "build"]
    id: "astro-build"
    waitFor: ["npm-install"]

  # 3. Deploy to Google Cloud Storage
  # We use 'gcloud storage rsync' to efficiently sync the contents of the 'dist'
  # directory to your GCS bucket. It only uploads changed files.
  # The -R flag makes sure subdirectories are synced correctly.
  # The -d flag deletes files in the bucket that are no longer in the 'dist' folder.
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "storage"
      - "rsync"
      - "-R"
      - "-d"
      - "dist" # The source directory generated by 'astro build'
      - "gs://astro-blog" # The destination GCS bucket
    id: "deploy-to-gcs"
    waitFor: ["astro-build"]
    automapSubstitutions: true

  # 4. Invalidate CDN Cache (Optional, but recommended for production)
  # If you have a Google Cloud CDN set up in front of your GCS bucket,
  # this step will purge the entire cache, ensuring users see the latest version.
  # The secret `PURGE_KEY` is no longer needed as auth is handled by IAM.
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "compute"
      - "url-maps"
      - "invalidate-cdn-cache"
      - "your-load-balancer-name" # The name of the load balancer for your CDN
      - "--path=/*"
    id: "invalidate-cdn"
    waitFor: ["deploy-to-gcs"]
    automapSubstitutions: true

substitutions:
  _BUCKET_NAME: "astro-blog"
  _LOAD_BALANCER_NAME: "your-load-balancer-name"

options:
  logging: CLOUD_LOGGING_ONLY
