---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

const cleanPosts = posts.map(post => ({
  id: post.id,
  body: post.body,
  data: {
	  ...post.data,
	  // Convert Date object to a string
	  pubDate: post.data.pubDate.toISOString(),
  }
}));

const recentPosts = posts.slice(0, 10);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<script id="posts-data" type="application/json" is:inline>
			{JSON.stringify(cleanPosts)}
		</script>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main>
			<div id="default-layout" class="grid-container">
				<section class="main-column">
					<h2>Recent</h2>
					<h3 id="search-subtitle" style="display: none; font-size: 0.9em; color: #666;"></h3>
					<ul id="recent-posts-list" class="post-list">
						{
							recentPosts.map((post) => (
								<li class="post-list-item">
									<a href={`/blog/${post.id}`}>
										<h3 class="title">{post.data.title}</h3>
										<p class="description">{post.data.description}</p>
										<FormattedDate date={post.data.pubDate} />
										{(post.data as any).category && <div class="category-tag">{(post.data as any).category}</div>}
									</a>
								</li>
							))
						}
					</ul>
					<ul id="search-results-list" class="post-list" style="display: none;">
						<!-- Search results will be injected here -->
					</ul>
				</section>
				<aside class="sidebar-column">
					<h2>Index</h2>
					<ul id="post-index-list" class="index-list">
						{
							posts.map((post) => (
								<li data-id={post.id}>
									<a href={`/blog/${post.id}`}>
										{post.data.title}
									</a>
									<br />
									<small>
										<FormattedDate date={post.data.pubDate} />
									</small>
								</li>
							))
						}
					</ul>
				</aside>
			</div>
		</main>
		<Footer />
		<script define:vars={{ posts: cleanPosts }} is:inline>
			// This script safely transfers data from the server to the client.
			window.posts = posts;
		</script>
		<script>
			// This is a module script, so Astro will handle the import correctly.
			import Fuse from 'fuse.js';

			// Define types for our data to ensure type safety.
			interface Post {
				id: string;
				slug: string;
				body: string;
				data: {
					title: string;
					description: string;
					pubDate: string;
					category?: string;
				}
			}

			

			// Extend the global Window interface to include our posts array.
			declare global {
				interface Window {
					posts: Post[];
				}
			}

			// We can now safely access the data from the window object.
			const posts = window.posts || [];

			const fuse = new Fuse(posts, {
				keys: ['data.title', 'data.description', 'body'],
				includeScore: true,
				includeMatches: true,
				threshold: 0.4,
			});

			const searchInput = document.getElementById('search-input');
			const recentPostsList = document.getElementById('recent-posts-list');
			const searchResultsList = document.getElementById('search-results-list');
			const searchSubtitle = document.getElementById('search-subtitle');

			function highlight(text: string, indices: [number, number][]): string {
				let result = '';
				let lastIndex = 0;
				indices.forEach(([start, end]) => {
					result += text.substring(lastIndex, start);
					result += `<mark>${text.substring(start, end + 1)}</mark>`;
					lastIndex = end + 1;
				});
				result += text.substring(lastIndex);
				return result;
			}

			function displayResults(query: string, results: any[]) {
				if (!searchResultsList || !recentPostsList || !searchSubtitle) return;

				searchResultsList.innerHTML = '';
				if (results.length === 0) {
					searchResultsList.innerHTML = '<li>No results found.</li>';
				} else {
					results.forEach(result => {
						const post = result.item;
						let title = post.data.title;
						let description = post.data.description;

						const titleMatch = result.matches.find((m: any) => m.key === 'data.title');
						if (titleMatch) {
							title = highlight(title, titleMatch.indices);
						}

						const descriptionMatch = result.matches.find((m: any) => m.key === 'data.description');
						if (descriptionMatch) {
							description = highlight(description, descriptionMatch.indices);
						}

						const listItem = document.createElement('li');
						listItem.classList.add('post-list-item');
						listItem.innerHTML = `
							<a href="/blog/${post.slug}/">
								<h3 class="title">${title}</h3>
								<p class="description">${description}</p>
								<small>${new Date(post.data.pubDate).toLocaleDateString()}</small>
							</a>
						`;
						searchResultsList.appendChild(listItem);
					});
				}
				searchSubtitle.textContent = `Showing matches for query '${query}'`;
				searchSubtitle.style.display = 'block';
				recentPostsList.style.display = 'none';
				searchResultsList.style.display = 'block';
			}

			function displayDefault() {
				if (!searchResultsList || !recentPostsList || !searchSubtitle) return;
				searchSubtitle.style.display = 'none';
				searchResultsList.style.display = 'none';
				recentPostsList.style.display = 'block';
			}

			if (searchInput instanceof HTMLInputElement) {
				const urlParams = new URLSearchParams(window.location.search);
				const query = urlParams.get('q');
				if (query) {
					searchInput.value = query;
					const results = fuse.search(query);
					displayResults(query, results);
				}

				searchInput.addEventListener('input', (e) => {
					if (e.target instanceof HTMLInputElement) {
						const query = e.target.value;
						if (query.trim() === '') {
							displayDefault();
							return;
						}
						const results = fuse.search(query);
						displayResults(query, results);
					}
				});
			}
		</script>
	</body>
