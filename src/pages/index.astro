---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

const recentPosts = posts.slice(0, 5);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			.grid-container {
				display: grid;
				grid-template-columns: 4fr 1fr;
				gap: 2em;
			}
			.post-list-item {
				margin-bottom: 2em;
			}
			.post-list-item a {
				text-decoration: none;
				color: inherit;
			}
			.post-list-item:hover {
				cursor: pointer;
			}
			.post-list-item .title {
				font-size: 1.5em;
				margin-bottom: 0.5em;
				color: blue;
				text-decoration: underline;
			}
			.post-list-item .description {
				color: #666;
			}
			.index-list li {
				margin-bottom: 0.5em;
			}
		</style>
	<script id="posts-data" type="application/json" is:inline>
			{JSON.stringify(posts)}
		</script>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main>
			<div id="default-layout" class="grid-container">
				<section>
					<h2>Recent</h2>
					<ul class="post-list">
						{
							recentPosts.map((post) => (
								<li class="post-list-item">
									<a href={`/blog/${post.id}/`}>
										<h3 class="title">{post.data.title}</h3>
										<p class="description">{post.data.description}</p>
										<FormattedDate date={post.data.pubDate} />
									</a>
								</li>
							))
						}
					</ul>
				</section>
				<aside>
					<h2>Index</h2>
					<ul id="post-index-list" class="index-list">
						{
							posts.map((post) => (
								<li data-id={post.id}>
									<a href={`/blog/${post.id}/`}>
										{post.data.title}
									</a>
									<br />
									<small>
										<FormattedDate date={post.data.pubDate} />
									</small>
								</li>
							))
						}
					</ul>
				</aside>
			</div>
			<div id="search-results-container" style="display: none;">
				<h2>Search Results</h2>
				<ul id="search-results-list" class="post-list">
					<!-- Search results will be injected here -->
				</ul>
			</div>
		</main>
		<Footer />
		<script>
			<script>
			import Fuse from 'fuse.js';
			const postsData = document.getElementById('posts-data');
			const posts = postsData ? JSON.parse(postsData.textContent || '[]') : [];
			
			const fuse = new Fuse(posts, {
				keys: ['data.title', 'data.description', 'body'],
				includeScore: true,
				threshold: 0.4,
			});

			const searchInput = document.getElementById('search-input') as HTMLInputElement;
			const defaultLayout = document.getElementById('default-layout');
			const searchResultsContainer = document.getElementById('search-results-container');
			const searchResultsList = document.getElementById('search-results-list');

			function displayResults(results) {
				if (!searchResultsList || !defaultLayout || !searchResultsContainer) return;

				searchResultsList.innerHTML = '';
				if (results.length === 0) {
					searchResultsList.innerHTML = '<li>No results found.</li>';
				} else {
					results.forEach(result => {
						const post = result.item;
						const listItem = document.createElement('li');
						listItem.classList.add('post-list-item');
						listItem.innerHTML = `
							<a href="/blog/${post.id}/">
								<h3 class="title">${post.data.title}</h3>
								<p class="description">${post.data.description}</p>
								<small>${new Date(post.data.pubDate).toLocaleDateString()}</small>
							</a>
						`;
						searchResultsList.appendChild(listItem);
					});
				}
				defaultLayout.style.display = 'none';
				searchResultsContainer.style.display = 'block';
			}

			function displayDefault() {
				if (!searchResultsList || !defaultLayout || !searchResultsContainer) return;
				searchResultsContainer.style.display = 'none';
				defaultLayout.style.display = 'grid';
			}

			const urlParams = new URLSearchParams(window.location.search);
			const query = urlParams.get('q');
			if (query) {
				searchInput.value = query;
				const results = fuse.search(query);
				displayResults(results);
			}

			searchInput.addEventListener('input', (e) => {
				const query = (e.target as HTMLInputElement).value;
				if (query.trim() === '') {
					displayDefault();
					return;
				}
				const results = fuse.search(query);
				displayResults(results);
			});
		</script>
		</script>
	</body>
