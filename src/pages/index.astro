---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

const recentPosts = posts.slice(0, 5);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			.grid-container {
				display: grid;
				grid-template-columns: 4fr 1fr;
				gap: 2em;
			}
			.post-list-item {
				margin-bottom: 2em;
			}
			.post-list-item a {
				text-decoration: none;
				color: inherit;
			}
			.post-list-item:hover {
				cursor: pointer;
			}
			.post-list-item .title {
				font-size: 1.5em;
				margin-bottom: 0.5em;
				color: blue;
				text-decoration: underline;
			}
			.post-list-item .description {
				color: #666;
			}
			.index-list li {
				margin-bottom: 0.5em;
			}
		</style>
	<script id="posts-data" type="application/json" is:inline>
			{JSON.stringify(posts)}
		</script>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main>
			<div id="default-layout" class="grid-container">
				<section>
					<h2>Recent</h2>
					<ul class="post-list">
						{
							recentPosts.map((post) => (
								<li class="post-list-item">
									<a href={`/blog/${post.id}/`}>
										<h3 class="title">{post.data.title}</h3>
										<p class="description">{post.data.description}</p>
										<FormattedDate date={post.data.pubDate} />
										{(post.data as any).category && <div class="category-tag">{(post.data as any).category}</div>}
									</a>
								</li>
							))
						}
					</ul>
				</section>
				<aside>
					<h2>Index</h2>
					<ul id="post-index-list" class="index-list">
						{
							posts.map((post) => (
								<li data-id={post.id}>
									<a href={`/blog/${post.id}/`}>
										{post.data.title}
									</a>
									<br />
									<small>
										<FormattedDate date={post.data.pubDate} />
									</small>
								</li>
							))
						}
					</ul>
				</aside>
			</div>
			<div id="search-results-container" style="display: none;">
				<h2>Search Results</h2>
				<ul id="search-results-list" class="post-list">
					<!-- Search results will be injected here -->
				</ul>
			</div>
		</main>
		<Footer />
		<script>
			import Fuse from 'fuse.js';
			const postsData = document.getElementById('posts-data');
			const posts = postsData ? JSON.parse(postsData.textContent || '[]') : [];
			
			const fuse = new Fuse(posts, {
				keys: ['data.title', 'data.description', 'body'],
				includeScore: true,
				threshold: 0.4,
			});

			const searchInput = document.getElementById('search-input') as HTMLInputElement;
			const postList = document.getElementById('post-list');
			if (postList) {
				const originalOrder = Array.from(postList.children);

				function filterPosts(query: string) {
					if (!postList) return;
					if (query.trim() === '') {
						// Restore original order and show all
						originalOrder.forEach(child => {
							if (postList) {
								postList.appendChild(child)
							}
						});
						postList.childNodes.forEach(li => {
							const listItem = li as HTMLElement;
							if(listItem.style) listItem.style.display = 'block';
						});
						return;
					}

					const results = fuse.search(query);
					const matchedSlugs = new Set(results.map(r => (r.item as any).slug));

					postList.childNodes.forEach(li => {
						const listItem = li as HTMLElement;
						if (listItem.dataset && matchedSlugs.has(listItem.dataset.slug)) {
							listItem.style.display = 'block';
						} else if (listItem.style) {
							listItem.style.display = 'none';
						}
					});
				}

				const urlParams = new URLSearchParams(window.location.search);
				const query = urlParams.get('q');

				if (query) {
					searchInput.value = query;
					filterPosts(query);
				}

				searchInput.addEventListener('input', (e) => {
					filterPosts((e.target as HTMLInputElement).value);
				});
			}
		</script>
	</body>
