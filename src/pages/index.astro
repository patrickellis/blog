---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

const recentPosts = posts.slice(0, 5);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			.grid-container {
				display: grid;
				grid-template-columns: 3fr 1fr;
				gap: 2em;
			}
			.post-list-item {
				margin-bottom: 2em;
			}
			.post-list-item .title {
				font-size: 1.5em;
				margin-bottom: 0.5em;
			}
			.post-list-item .description {
				color: #666;
			}
			.index-list li {
				margin-bottom: 0.5em;
			}
		</style>
	<script id="posts-data" type="application/json" is:inline>
			{JSON.stringify(posts)}
		</script>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main class="grid-container" style="flex-grow: 1;">
			<section>
				<h2>Recent</h2>
				<ul>
					{
						recentPosts.map((post) => (
							<li class="post-list-item">
								<a href={`/blog/${post.id}/`}>
									<h3 class="title">{post.data.title}</h3>
									<p class="description">{post.data.description}</p>
									<FormattedDate date={post.data.pubDate} />
								</a>
							</li>
						))
					}
				</ul>
			</section>
			<aside>
				<h2>Index</h2>
				<ul class="index-list">
					{
						posts.map((post) => (
							<li>
								<a href={`/blog/${post.id}/`}>
									{post.data.title}
								</a>
								<br />
								<small>
									<FormattedDate date={post.data.pubDate} />
								</small>
							</li>
						))
					}
				</ul>
			</aside>
		</main>
		<Footer />
		<script>
			import Fuse from 'fuse.js';
			const posts = JSON.parse(document.getElementById('posts-data').textContent);
			
			const fuse = new Fuse(posts, {
				keys: ['data.title', 'data.description', 'body'],
				includeScore: true,
				threshold: 0.4,
			});

			const searchInput = document.getElementById('search-input') as HTMLInputElement;
			const postList = document.getElementById('post-list');
			const originalOrder = Array.from(postList.children);

			const urlParams = new URLSearchParams(window.location.search);
			const query = urlParams.get('q');
			if (query) {
				searchInput.value = query;
				filterPosts(query);
			}

			searchInput.addEventListener('input', (e) => {
				filterPosts((e.target as HTMLInputElement).value);
			});

			function filterPosts(query: string) {
				if (query.trim() === '') {
					// Restore original order and show all
					originalOrder.forEach(child => postList.appendChild(child));
					postList.childNodes.forEach(li => {
						if(li.style) li.style.display = 'block';
					});
					return;
				}

				const results = fuse.search(query);
				const matchedSlugs = new Set(results.map(r => r.item.slug));

				postList.childNodes.forEach(li => {
					if (li.dataset && matchedSlugs.has(li.dataset.slug)) {
						li.style.display = 'block';
					} else if (li.style) {
						li.style.display = 'none';
					}
				});
			}
		</script>
	</body>
</html>
